#! /usr/bin/perl -w
use strict;

=head1 NAME

adsmunge.pl - munge ADS bibtex citations

=head1 SYNOPSIS

perl adsmunge.pl [OPTIONS] ADSfile1 ADSfile2 ...

=head1 DESCRIPTION

Changes article identifiers to something more easily remembered.
Reads from stdin or the list of filenames given, outputs to stdout.

See EXAMPLES.

=head1 EXAMPLES

The effect of this program is more easily seen than explained...

=over 4

=item Simple case with less than three authors

	@ARTICLE{2002MNRAS.335L..29K,
	    author = {{Klu{\' z}niak}, W.~;. and {Lee}, W.~H.},

becomes

	@ARTICLE{Kluzniak.Lee:02,
	    author = {{Klu{\' z}niak}, W.~;. and {Lee}, W.~H.},

=item Case of multiple identical references

Given the previous example, if later an ADS article appeared such as

	@ARTICLE{2002PASP.159L..13K,
	    author = {{Klu{\' z}niak}, W.~;. and {Lee}, W.~H.},

then the munged article is

	@ARTICLE{Kluzniak.Lee:02b,
	    author = {{Klu{\' z}niak}, W.~;. and {Lee}, W.~H.},

Note the C<b>.

=item Case of three or more authors

You get an C<etal> with just one author in the munged article:

	@ARTICLE{2002ApJ...572..996D,
	    author = {{Drake}, J.~J. and {Marshall}, H.~L. and {Dreizler}, S.
	    and {Freeman}, P.~E. and {Fruscione}, A. and {Juda}, M.},

This is output as

	@ARTICLE{Drake.etal:02,
	    author = {{Drake}, J.~J. and {Marshall}, H.~L. and {Dreizler}, S.
	    and {Freeman}, P.~E. and {Fruscione}, A. and {Juda}, M.},

=back

=head1 OPTIONS

=over 4

=item --help

Show help and exit.

=item --version

Show version and exit;

=back

=head1 AUTHOR

Pete Ratzlaff E<lt>pratzlaff@cfa.harvard.eduE<gt> September 2002

=head1 SEE ALSO

perl(1).

=cut

my $version = '0.1';

use FindBin;

use Getopt::Long;
my %default_opts = (
		    );
my %opts = %default_opts;
GetOptions(\%opts,
	   'help!', 'version!',
	   ) or die "Try --help for more information.\n";
$opts{help} and _help();
$opts{version} and _version();

my %authorstrings;

while (my ($type, $article, $id) = read_article()) {
  my ($k, $d) = parse_article($article);

  # order is preserved in $k and $d, now we want to make it easy
  # to get whichever key is needed
  my %data; @data{@$k} = @$d;

  # if we can't munge it, just print it back out
  if (!exists $data{author} or !exists $data{year}) {
    write_article($type, $id, $k, $d);
    next;
  }

  my ($year) = $data{year} =~ /(\d+)/;
  $year = substr($year, -2);

  my @authors = extract_authors($data{author});

  my $authorstring = @authors < 3 ?
    join('.',@authors).":$year"
      :
	"$authors[0].etal:$year";

  $authorstrings{$authorstring}++;
  if ($authorstrings{$authorstring} > 1) {
    $authorstring .= chr( ord('a') + $authorstrings{$authorstring} - 1);
  }

  write_article($type, $authorstring, $k, $d);

}

exit 0;

sub write_article {
  my ($type, $id, $keys, $data) = @_;
  print "\@$type\{$id,\n";
  print "    $keys->[$_] = $data->[$_]" for 0..$#{$keys};
  print "\}\n\n";
}

sub extract_authors {
  my $astring = shift;

  # remove leading and trailing brackets
  $astring =~ s/^\{(.*)\},?$/$1/s or die;

  my @authors;
  while ($astring =~ /\{(.*?)\},/g) {
    my $a = $1;

    # remove funny latex stuff for things like accents
    $a =~ s/\{\\\S\s*(\w+)\}/$1/g;

    # remove spaces
    $a =~ s/\s+/_/g;

    push @authors, $a;
  }
  return @authors;
}


sub read_article {
  my @data;
  local $_;
  my $in_article = 0;
  my $article = '';
  my $type;
  my $id;
 ARTICLE:
  while (<>) {

    # start of an article
    if (/^\@([A-Z]+)\{(.*),$/) {
      $type = $1; # e.g., ARTICLE or INPROCEEDINGS
      $id = $2;
      while (<>) {
	last ARTICLE if (/^\}\s*$/);
	$article .= $_;

      }
      die "truncated ARTICLE";

    }

  }
  return unless defined;
  return ($type, $article, $id);
}

sub parse_article {
  my $article = shift;
  my (@keys, @data);
  while ($article =~ /^\s+(\w+)\s+=\s+(.*?)(,\n(?=\s+\w+\s+)|\n\z)/gms) {
    push @keys, $1;
    push @data, $2.$3;
  }
  return \@keys, \@data;
}

sub _help {
  exec('perldoc', '-F', $FindBin::Bin . '/' . $FindBin::RealScript);
}

sub _version {
  print $version,"\n";
  exit 0;
}
